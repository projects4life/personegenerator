#!/usr/bin/env python3
from flask import Flask
import requests
import boto3
import json
from bs4 import BeautifulSoup

app = Flask(__name__)

# Index page
@app.route('/', methods=['GET'])
def index():
    return 'soon be implemented'


def get_random_image():
    """
    Gets a random image of a person generated by the website https://this-person-does-not-exist.com/en,
    saves it to a file named "random-face.jpg" in a directory called "images/", and returns nothing.

    This function sends a GET request to the website to get the URL of a randomly generated image of a person,
    parses the response using BeautifulSoup to find the image URL, sends a second GET request to get the image data,
    and saves the image data to a file named "random-face.jpg" in a directory called "images/".

    Args:
        None.

    Returns:
        None.
    """
    # Sending a request
    url = "https://this-person-does-not-exist.com/en"
    response = requests.get(url)
    # parsing the response 
    soup = BeautifulSoup(response.text, "html.parser")
    img = soup.find("img", {"id": "avatar"})
    random_image_url=f"https://this-person-does-not-exist.com{img['src']}"
    # saving it into a file
    image = requests.get(random_image_url)
    filename = "images/random-face.jpg"
    with open(filename, "wb") as file:
        file.write(image.content)
    return "image has been created"

def get_image_info_from_aws():
    
    photo="photo.jpg"
    client=boto3.client('rekognition')
    with open(photo, 'rb') as image:
            response = client.detect_faces(Image={'Bytes': image.read()},Attributes=['ALL'])
    
    print('Detected faces for ' + photo)    
    for faceDetail in response['FaceDetails']:
        print('The detected face is around ' + str(int(faceDetail['AgeRange']['Low']) + int(faceDetail['AgeRange']['High']) / 2 ))
        age = str(int(faceDetail['AgeRange']['Low']) + int(faceDetail['AgeRange']['High']) / 2 )
        print("gender: " + str(faceDetail['Gender']['Value']) + " with " + str(faceDetail['Gender']['Confidence']) + "%" )
        gender = str(faceDetail['Gender']['Value'])
        print("smile" + str(faceDetail['Smile']['Value']) + "with" + str(faceDetail['Smile']['Confidence']) + "%" )
        smile = str(faceDetail['Smile']['Value'])
        #print(json.dumps(faceDetail, indent=4, sort_keys=True)) ##### to print the whole list    
    
    full = "smile: " + smile + "\n" + "age~: " + age + "gender: " + gender
    return full

def send_info_to_chat_gpt():
    return "soon implemented"

def render_result():
    return "soon implemented" 



if __name__ == '__main__':
    app.run(host='0.0.0.0',debug=True)
