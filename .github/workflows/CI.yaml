name: CI

on:
  push:
    branches: [ "main", "devops", "feature/*" ]

env:
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  APP_USER: ${{ secrets.APP_PASSWORD }}
  APP_PASSWORD: ${{ secrets.APP_USER }}


permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  CI:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v3
      id: git_clone

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      id: configure-aws-credentials
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
      
    - name: Install dependencies for testing
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
     
    - name: Unit Test With pytest
      id: unit_test
      run: | 
        # Creating images directory in order for the test to pass
        pytest test_unit_test.py

    - name: Build Docker Compose
      id: Build
      run: |
        echo 'OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}' >> .env
        docker compose convert
        docker compose up -d

    - name: E2E test
      id: E2E
      run: |
        sleep 10
        curl localhost:80/persona
        pytest test_e2e.py

    - name: Main Branch E2E
      id: Main-Branch-E2E
      if: ${{ github.ref == 'refs/heads/main' }} || contains(${{ github.event.head_commit.message }}, '#FULL-E2E')    
      run: |
        pytest test_e2e_prod

    - name: Slack Notification
      uses: act10ns/slack@v2.0.0
      # send message even if the ci fails
      if: always()
      with:
        status: ${{ job.status }}
        steps: ${{ toJson(steps) }}
